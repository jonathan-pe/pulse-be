/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Account: { // root type
    access_token?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expires_at?: number | null; // Int
    id_token?: string | null; // String
    provider: string; // String!
    providerAccountId: string; // String!
    refresh_token?: string | null; // String
    scope?: string | null; // String
    session_state?: string | null; // String
    token_type?: string | null; // String
    type: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Authenticator: { // root type
    counter: number; // Int!
    credentialBackedUp: boolean; // Boolean!
    credentialDeviceType: string; // String!
    credentialID: string; // String!
    credentialPublicKey: string; // String!
    providerAccountId: string; // String!
    transports?: string | null; // String
    userId: string; // String!
  }
  Mutation: {};
  Query: {};
  Session: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expires: NexusGenScalars['DateTime']; // DateTime!
    sessionToken: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Sportsbook: { // root type
    clone?: NexusGenRootTypes['Sportsbook'] | null; // Sportsbook
    country?: string | null; // String
    fantasy?: boolean | null; // Boolean
    id?: string | null; // String
    name?: string | null; // String
    sgp?: boolean | null; // Boolean
    state?: string | null; // String
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    emailVerified?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    image?: string | null; // String
    name?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserStats: { // root type
    correctPredictions: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currentStreak: number; // Int!
    id: string; // ID!
    longestStreak: number; // Int!
    points: number; // Int!
    totalPredictions: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  VerificationToken: { // root type
    expires: NexusGenScalars['DateTime']; // DateTime!
    identifier: string; // String!
    token: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Account: { // field return type
    access_token: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expires_at: number | null; // Int
    id_token: string | null; // String
    provider: string; // String!
    providerAccountId: string; // String!
    refresh_token: string | null; // String
    scope: string | null; // String
    session_state: string | null; // String
    token_type: string | null; // String
    type: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Authenticator: { // field return type
    counter: number; // Int!
    credentialBackedUp: boolean; // Boolean!
    credentialDeviceType: string; // String!
    credentialID: string; // String!
    credentialPublicKey: string; // String!
    providerAccountId: string; // String!
    transports: string | null; // String
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['User'] | null; // User
    createUserStats: NexusGenRootTypes['UserStats'] | null; // UserStats
    updateUserStats: NexusGenRootTypes['UserStats'] | null; // UserStats
  }
  Query: { // field return type
    sportsbooks: Array<NexusGenRootTypes['Sportsbook'] | null> | null; // [Sportsbook]
    userById: NexusGenRootTypes['User'] | null; // User
    userStatsByUserId: NexusGenRootTypes['UserStats'] | null; // UserStats
  }
  Session: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expires: NexusGenScalars['DateTime']; // DateTime!
    sessionToken: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  Sportsbook: { // field return type
    clone: NexusGenRootTypes['Sportsbook'] | null; // Sportsbook
    country: string | null; // String
    fantasy: boolean | null; // Boolean
    id: string | null; // String
    name: string | null; // String
    sgp: boolean | null; // Boolean
    state: string | null; // String
  }
  User: { // field return type
    Authenticator: NexusGenRootTypes['Authenticator'][]; // [Authenticator!]!
    UserStats: NexusGenRootTypes['UserStats'] | null; // UserStats
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    emailVerified: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    image: string | null; // String
    name: string | null; // String
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserStats: { // field return type
    correctPredictions: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currentStreak: number; // Int!
    id: string; // ID!
    longestStreak: number; // Int!
    points: number; // Int!
    totalPredictions: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  VerificationToken: { // field return type
    expires: NexusGenScalars['DateTime']; // DateTime!
    identifier: string; // String!
    token: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    access_token: 'String'
    createdAt: 'DateTime'
    expires_at: 'Int'
    id_token: 'String'
    provider: 'String'
    providerAccountId: 'String'
    refresh_token: 'String'
    scope: 'String'
    session_state: 'String'
    token_type: 'String'
    type: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Authenticator: { // field return type name
    counter: 'Int'
    credentialBackedUp: 'Boolean'
    credentialDeviceType: 'String'
    credentialID: 'String'
    credentialPublicKey: 'String'
    providerAccountId: 'String'
    transports: 'String'
    user: 'User'
    userId: 'String'
  }
  Mutation: { // field return type name
    createUser: 'User'
    createUserStats: 'UserStats'
    updateUserStats: 'UserStats'
  }
  Query: { // field return type name
    sportsbooks: 'Sportsbook'
    userById: 'User'
    userStatsByUserId: 'UserStats'
  }
  Session: { // field return type name
    createdAt: 'DateTime'
    expires: 'DateTime'
    sessionToken: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Sportsbook: { // field return type name
    clone: 'Sportsbook'
    country: 'String'
    fantasy: 'Boolean'
    id: 'String'
    name: 'String'
    sgp: 'Boolean'
    state: 'String'
  }
  User: { // field return type name
    Authenticator: 'Authenticator'
    UserStats: 'UserStats'
    accounts: 'Account'
    createdAt: 'DateTime'
    email: 'String'
    emailVerified: 'DateTime'
    id: 'ID'
    image: 'String'
    name: 'String'
    sessions: 'Session'
    updatedAt: 'DateTime'
  }
  UserStats: { // field return type name
    correctPredictions: 'Int'
    createdAt: 'DateTime'
    currentStreak: 'Int'
    id: 'ID'
    longestStreak: 'Int'
    points: 'Int'
    totalPredictions: 'Int'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  VerificationToken: { // field return type name
    expires: 'DateTime'
    identifier: 'String'
    token: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      email?: string | null; // String
      name?: string | null; // String
    }
    createUserStats: { // args
      correctPredictions?: number | null; // Int
      currentStreak?: number | null; // Int
      longestStreak?: number | null; // Int
      points?: number | null; // Int
      totalPredictions?: number | null; // Int
      userId?: string | null; // String
    }
    updateUserStats: { // args
      correctPredictions?: number | null; // Int
      currentStreak?: number | null; // Int
      longestStreak?: number | null; // Int
      points?: number | null; // Int
      totalPredictions?: number | null; // Int
      userId?: string | null; // String
    }
  }
  Query: {
    userById: { // args
      id?: string | null; // String
    }
    userStatsByUserId: { // args
      userId?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}